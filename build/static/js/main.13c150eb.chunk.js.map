{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","mondaySdk","App","props","state","settings","name","listen","res","setState","data","console","log","api","variables","boardIds","context","then","boardData","className","style","background","this","title","attentionBoxTitle","text","attentionBoxMessage","type","attentionBoxType","JSON","stringify","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iXAOMA,EAASC,MA4DAC,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAGDC,MAAQ,CACXC,SAAU,GACVC,KAAM,IANS,E,gEAUE,IAAD,OAClBN,EAAOO,OAAO,YAAY,SAACC,GACzB,EAAKC,SAAS,CAAEJ,SAAUG,EAAIE,OAC9BC,QAAQC,IAAIJ,EAAIE,MAChBV,EACGa,IADH,oHAGI,CAAEC,UAAW,CAAEC,SAAU,EAAKX,MAAMY,QAAQD,YAE7CE,MAAK,SAACT,GACL,EAAKC,SAAS,CAAES,UAAWV,EAAIE,aAIrCV,EAAOO,OAAO,WAAW,SAACC,GACxB,EAAKC,SAAS,CAAEO,QAASR,EAAIE,OAC7BC,QAAQC,IAAIJ,EAAIE,MAChBV,EACGa,IADH,oHAGI,CAAEC,UAAW,CAAEC,SAAU,EAAKX,MAAMY,QAAQD,YAE7CE,MAAK,SAACT,GACL,EAAKC,SAAS,CAAES,UAAWV,EAAIE,e,+BAMrC,OACE,yBACES,UAAU,MACVC,MAAO,CAAEC,WAAYC,KAAKlB,MAAMC,SAASgB,aAEzC,kBAAC,IAAD,CACEE,MAAOD,KAAKlB,MAAMC,SAASmB,mBAAqB,oBAChDC,KACEH,KAAKlB,MAAMC,SAASqB,qBACpB,2HAEFC,KAAML,KAAKlB,MAAMC,SAASuB,kBAAoB,YAE/CC,KAAKC,UAAUR,KAAKlB,MAAMc,UAAW,KAAM,Q,GArDlCa,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.13c150eb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\n\nconst monday = mondaySdk();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {},\n      name: \"\",\n    };\n  }\n\n  componentDidMount() {\n    monday.listen(\"settings\", (res) => {\n      this.setState({ settings: res.data });\n      console.log(res.data);\n      monday\n        .api(\n          `query ($boardIds: [Int]) { boards (ids:$boardIds) { name items(limit:1) { name column_values { title text } } } }`,\n          { variables: { boardIds: this.state.context.boardIds } }\n        )\n        .then((res) => {\n          this.setState({ boardData: res.data });\n        });\n    });\n\n    monday.listen(\"context\", (res) => {\n      this.setState({ context: res.data });\n      console.log(res.data);\n      monday\n        .api(\n          `query ($boardIds: [Int]) { boards (ids:$boardIds) { name items(limit:1) { name column_values { title text } } } }`,\n          { variables: { boardIds: this.state.context.boardIds } }\n        )\n        .then((res) => {\n          this.setState({ boardData: res.data });\n        });\n    });\n  }\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{ background: this.state.settings.background }}\n      >\n        <AttentionBox\n          title={this.state.settings.attentionBoxTitle || \"Hello monday.apps\"}\n          text={\n            this.state.settings.attentionBoxMessage ||\n            \"You should be able to edit the info that appears here using the fields you've set up previously in the View settings :) \"\n          }\n          type={this.state.settings.attentionBoxType || \"success\"}\n        />\n        {JSON.stringify(this.state.boardData, null, 2)}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}